import json
import os

import openai


class ChatGPTDocstringGenerator:
    def __init__(
        self,
        api_key: str = None,
        model: str = "gpt-3.5-turbo",
        docstrings_style: str = "google",
    ):
        self.api_key = api_key if api_key else os.getenv("OPENAI_API_KEY")
        self.model = model
        self.docstrings_style = docstrings_style

        if self.docstrings_style not in ["google", "numpy" or "reStructuredText"]:
            raise ValueError(
                "Docstring style no found. "
                "Choose between `google`, `numpy` or `reStructuredText`"
            )

        if not self.api_key:
            raise ValueError("Please, provide the OpenAI API Key")

        openai.api_key = self.api_key

    def _get_completion(self, prompt: str) -> dict:
        """
        Gets completion of prompt using OpenAI API

        Args:
            prompt: ChatGPT prompt

        Returns:
            ChatGPT response
        """
        messages = [{"role": "user", "content": prompt}]
        response = openai.ChatCompletion.create(
            model=self.model,
            messages=messages,
            temperature=0,  # TODO: Should we let user configure temperature??
        )
        return json.loads(response.choices[0].message["content"])

    def generate_function_docstring(self, source: str) -> dict:
        """
        Generates docstring for Python function.

        Args:
            source: The source code of the Python method

        Returns:
            A dictionary containing the docstrings generated by ChatGPT
        """
        prompt = f"""
        Your task is to generate a detailed {self.docstrings_style} style Python docstring for the Python function
        delimited by triple quotes. Store this docstring inside a JSON, with a key names 'docstring'.

        '''
        {source}
        '''
        """
        return self._get_completion(prompt)

    def generate_class_docstring(self, source: str) -> dict:
        """
        Generates docstring for Python class

        Args:
            source: The source code of the Python class

        Returns:
            A dictionary like the following:

                {'docstring': <class docstring>, '<method1's name>': <docstring for method1>, ...}
        """
        prompt = """
        Your task is to generate an detailed {} style Python docstring for the Python class delimited by triple
        quotes. The output should be a JSON with the following format:

        {{
            "docstring": <class docstring>,
            "<method1's name>": <docstring for method1>,
            "<method2's name>": <docstring for method2>,
            ...
        }}

        '''
        {}
        '''
        """.format(
            self.docstrings_style,
            source,
        )
        return self._get_completion(prompt)
