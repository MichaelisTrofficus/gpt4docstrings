import os

import openai
from redbaron import RedBaron


class ChatGPTDocstringGenerator:
    def __init__(
        self,
        api_key: str = None,
        model: str = "gpt-3.5-turbo",
        docstrings_style: str = "google",
    ):
        self.api_key = api_key if api_key else os.getenv("OPENAI_API_KEY")
        self.model = model

        if docstrings_style not in ["google", "numpy" or "reStructuredText"]:
            raise ValueError(
                "Docstring style no found. "
                "Choose between `google`, `numpy` or `reStructuredText`"
            )

        self.docstrings_style = (
            docstrings_style if docstrings_style != "numpy" else "numpydoc"
        )

        if not self.api_key:
            raise ValueError("Please, provide the OpenAI API Key")

        openai.api_key = self.api_key

    def _get_completion(self, prompt: str) -> dict:
        """
        Gets completion of prompt using OpenAI API

        Args:
            prompt: ChatGPT prompt

        Returns:
            ChatGPT response
        """
        messages = [{"role": "user", "content": prompt}]
        response = openai.ChatCompletion.create(
            model=self.model,
            messages=messages,
            temperature=0,  # TODO: Should we let user configure temperature??
        )
        return response.choices[0].message["content"]

    def generate_function_docstring(self, source: str) -> dict:
        """
        Generates docstring for Python function.

        Args:
            source: The source code of the Python method

        Returns:
            A dictionary containing the docstrings generated by ChatGPT
        """
        while source.endswith("\n"):
            source = source[:-1]

        prompt = (
            f"Your task is to document the Python function below using"
            f" {self.docstrings_style} Python docstrings. Output the function with the"
            f" new docstring. Don't import any additional packages.\n\n"
        )
        prompt += "\n" + source + "\n"

        docstrings = {}

        for node in RedBaron(self._get_completion(prompt)).find_all("def"):
            docstrings["docstring"] = node.value[0].value

        return docstrings

    def generate_class_docstring(self, source: str) -> dict:
        """
        Generates docstring for Python class

        Args:
            source: The source code of the Python class

        Returns:
            A dictionary like the following:

                {'docstring': <class docstring>, '<method1's name>': <docstring for method1>, ...}
        """
        while source.endswith("\n"):
            source = source[:-1]

        prompt = (
            f"Your task is to document the Python class delimited by triple quotes using"
            f" {self.docstrings_style} Python docstrings. Output the class with the new"
            f" docstrings. Don't import any additional packages.\n\n"
        )
        prompt += "'''\n" + source + "\n'''"

        docstrings = {}

        for node in RedBaron(self._get_completion(prompt)).find_all("class"):
            docstrings["docstring"] = node.value[0].value

            for method_node in node.value:
                if method_node.type == "def":
                    docstrings[method_node.name] = method_node[0].value

        return docstrings
